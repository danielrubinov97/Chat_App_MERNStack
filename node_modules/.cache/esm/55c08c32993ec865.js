let ApolloServer,express,mongoose,session,redis,connectRedis,typeDefs,resolvers,APP_PORT,IN_PROD,DB_URI,SESS_SECRET,SESS_NAME,SESS_LIFETIME,REDIS_HOST,REDIS_PORT,REDIS_PASSWORD;_993‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_993‍.w("express",[["default",["express"],function(v){express=v}]]);_993‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_993‍.w("express-session",[["default",["session"],function(v){session=v}]]);_993‍.w("redis",[["default",["redis"],function(v){redis=v}]]);_993‍.w("connect-redis",[["default",["connectRedis"],function(v){connectRedis=v}]]);_993‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_993‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_993‍.w("./config",[["APP_PORT",["APP_PORT"],function(v){APP_PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["DB_URI",["DB_URI"],function(v){DB_URI=v}],["SESS_SECRET",["SESS_SECRET"],function(v){SESS_SECRET=v}],["SESS_NAME",["SESS_NAME"],function(v){SESS_NAME=v}],["SESS_LIFETIME",["SESS_LIFETIME"],function(v){SESS_LIFETIME=v}],["REDIS_HOST",["REDIS_HOST"],function(v){REDIS_HOST=v}],["REDIS_PORT",["REDIS_PORT"],function(v){REDIS_PORT=v}],["REDIS_PASSWORD",["REDIS_PASSWORD"],function(v){REDIS_PASSWORD=v}]]);









(async () => {
  try {
    await mongoose.connect(DB_URI, { useNewUrlParser: true, useCreateIndex: true, useUnifiedTopology: true })

    const app = express()

    app.disable('x-powered-by')

    const RedisStore = connectRedis(session)
    const redisClient = redis.createClient({
      port: REDIS_PORT,
      host: REDIS_HOST
    })
    redisClient.auth({ pass: REDIS_PASSWORD });

    const store = new RedisStore({
      client: redisClient
    })

    app.use(session({
      store,
      name: SESS_NAME,
      secret: SESS_SECRET,
      resave: false,
      saveUninitialized: false,
      cookie: {
        maxAge: SESS_LIFETIME,
        sameSite: true,
        secure: IN_PROD
      }
    }))

    const server = new ApolloServer({
      typeDefs,
      resolvers,
      playground: !IN_PROD,
      context: ({ req, res }) => ({ req, res })
    })

    server.applyMiddleware({ app })

    app.listen({ port: APP_PORT }, () => {
      console.log(`http://localhost:${APP_PORT}${server.graphqlPath}`)
    })
  } catch (e) {
    _993‍.g.console.error(e)
  }
})()
