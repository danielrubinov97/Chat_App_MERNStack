let AuthenticationError,User,SESS_NAME;_298‍.x([["attemptSignIn",()=>attemptSignIn],["checkSignedIn",()=>checkSignedIn],["checkSignedOut",()=>checkSignedOut],["signOut",()=>signOut]]);_298‍.w("apollo-server-express",[["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}]]);_298‍.w("./models",[["User",["User"],function(v){User=v}]]);_298‍.w("./config",[["SESS_NAME",["SESS_NAME"],function(v){SESS_NAME=v}]]);


       const attemptSignIn = async (email, password) => {
  const user = await User.findOne({ email })
  const message = 'Incorrect email or password. Please try again.'

  if (!user) {
    throw new AuthenticationError(message)
  }

  if (!await user.matchesPassword(password)) {
    throw new AuthenticationError(message)
  }
  return user
}

const signedIn = req => req.session.userId

       const checkSignedIn = req => {
  if (!signedIn(req)) {
    throw new AuthenticationError('You must be signed in.')
  }
}

       const checkSignedOut = req => {
  if (signedIn(req)) {
    throw new AuthenticationError('You are already signed in.')
  }
}

       const signOut = ({ req, res }) => new Promise(
  (resolve, reject) => {
    req.session.destroy(err => {
      if (err) {
        reject(err)
      }
      res.clearCookie(SESS_NAME)
      resolve(true)
    })
  }
)
